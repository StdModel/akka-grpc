@*
 * Copyright (C) 2018-2019 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.javadsl.Service, powerApis: Boolean)

@akka.grpc.gen.Constants.DoNotEditComment
package @service.packageName;

import java.util.concurrent.CompletionStage;

import akka.japi.Function;
import scala.concurrent.Future;

import akka.http.scaladsl.model.HttpRequest;
import akka.http.scaladsl.model.HttpResponse;
import akka.grpc.javadsl.GrpcExceptionHandler;
import akka.stream.Materializer;

import akka.grpc.internal.PlayRouter;

@defining(if (powerApis) service.name + "PowerApi" else service.name) { serviceName =>
  /**
   * Abstract base class for implementing @serviceName in Java and using as a play Router
   */
  public abstract class Abstract@{serviceName}Router extends PlayRouter implements @{serviceName} {
    private final Function<Throwable, Status> eHandler;

    public Abstract@{serviceName}Router(Materializer mat) {
      this(mat, GrpcExceptionHandler.defaultMapper());
    }

    public Abstract@{serviceName}Router(Materializer mat, Function<Throwable, Status> eHandler) {
      this.eHandler = eHandler;
      super(mat, @{service.name}.name);
    }

    /**
     * INTERNAL API
     */
    final public scala.Function1<HttpRequest, Future<HttpResponse>> createHandler(String prefix, Materializer mat) {
       return akka.grpc.internal.PlayRouterHelper.handlerFor(
          @{serviceName}HandlerFactory.create(this, prefix, mat, eHandler)
       );
    }
  }
}