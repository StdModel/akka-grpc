@*
 * Copyright (C) 2018 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.scaladsl.Service, powerApis: Boolean)

@akka.grpc.gen.Constants.DoNotEditComment
package @service.packageName

import akka.actor.ActorSystem;
import akka.grpc.GrpcServiceException;
import akka.grpc.internal.PlayRouterUsingActions;
import akka.grpc.javadsl.GrpcExceptionHandler;
import akka.http.javadsl.model.HttpRequest;
import akka.http.javadsl.model.HttpResponse;
import akka.japi.Function;
import akka.stream.Materializer;
import akka.stream.javadsl.Source;
import akka.util.ByteString;
import io.grpc.Status;
import play.api.mvc.*;
import play.libs.streams.Accumulator;
import scala.NotImplementedError;
import scala.concurrent.ExecutionContext;
import scala.util.Right;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CompletionStage;

@defining(if (powerApis) service.name + "PowerApi" else service.name) { serviceName =>
  /**
   * Abstract base class for implementing @{serviceName} and using as a play Router
   */
  abstract class Abstract@{serviceName}Router(mat: Materializer, system: ActorSystem, eHandler: ActorSystem => PartialFunction[Throwable, Status] = defaultMapper) extends PlayRouterUsingActions(mat, @{service.name}.name) with @{serviceName} {

    @{
      val (streamingInputMethods: Seq[String], unaryInputMethods: Seq[String]) = service.methods.partition(_.inputStreaming) match {
        case (streaming, unary) => (streaming.map(_.grpcName), unary.map(_.grpcName))
      }
      "val (streamingInputMethods: Seq[String], unaryInputMethods: Seq[String]) = (Seq(" + streamingInputMethods.mkString("\"", "\", \"", "\"") + "), Seq(" + unaryInputMethods.mkString("\"", "\", \"", "\"") + "))"
    }

    final override def createHandler(serviceName: String, mat: Materializer): RequestHeader => EssentialAction = { reqOuter =>
      implicit val ec: ExecutionContext = mat.executionContext
      val handler = @{serviceName}Handler(this, serviceName, eHandler)(mat, system)
      Path(reqOuter.path) match {
        case Path.Slash(Segment(`serviceName`, Path.Slash(Segment(method, Path.Empty)))) =>
          if (streamingInputMethods.contains(method)) createStreamingAction(handler)
          else if (unaryInputMethods.contains(method)) createUnaryAction(handler)
          else throw new NotImplementedError(s"Not implemented: $method")
        case _ => throw new GrpcServiceException(Status.INTERNAL.withDescription(s"Unexpected/handled path ${reqOuter.path}"))
      }
    }
  }
}
